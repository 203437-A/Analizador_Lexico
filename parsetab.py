
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CICLO_FOR COMILLA CONDICIONAL_IF CONTENIDO DECLARATIVO_FLOAT DECLARATIVO_INT DECLARATIVO_STRING DIGITO DOS_PUNTOS FUNCION_DEF IN MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE PARENTESIS_FINAL PARENTESIS_INICIAL PRINT PUNTO_Y_COMA VARIABLE\n    declaraciones : declaracion declaraciones\n                  | declaracion\n    \n    declaracion : DECLARATIVO_INT VARIABLE PUNTO_Y_COMA\n                | DECLARATIVO_STRING VARIABLE PUNTO_Y_COMA\n                | DECLARATIVO_FLOAT VARIABLE PUNTO_Y_COMA\n    \n    declaracion : CONDICIONAL_IF VARIABLE MAYOR_QUE DIGITO DOS_PUNTOS CONTENIDO\n                | CONDICIONAL_IF VARIABLE MENOR_QUE DIGITO DOS_PUNTOS CONTENIDO\n                | CONDICIONAL_IF VARIABLE MENOR_IGUAL DIGITO DOS_PUNTOS CONTENIDO\n                | CONDICIONAL_IF VARIABLE MAYOR_IGUAL DIGITO DOS_PUNTOS CONTENIDO\n    \n    declaracion : FUNCION_DEF VARIABLE PARENTESIS_INICIAL PARENTESIS_FINAL DOS_PUNTOS CONTENIDO\n    \n    declaracion : CICLO_FOR VARIABLE IN VARIABLE DOS_PUNTOS PRINT PARENTESIS_INICIAL COMILLA VARIABLE COMILLA PARENTESIS_FINAL PUNTO_Y_COMA\n    \n    declaracion : PRINT PARENTESIS_INICIAL COMILLA VARIABLE COMILLA PARENTESIS_FINAL PUNTO_Y_COMA\n    '
    
_lr_action_items = {'DECLARATIVO_INT':([0,2,18,19,20,42,43,44,45,46,50,55,],[3,3,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'DECLARATIVO_STRING':([0,2,18,19,20,42,43,44,45,46,50,55,],[4,4,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'DECLARATIVO_FLOAT':([0,2,18,19,20,42,43,44,45,46,50,55,],[5,5,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'CONDICIONAL_IF':([0,2,18,19,20,42,43,44,45,46,50,55,],[6,6,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'FUNCION_DEF':([0,2,18,19,20,42,43,44,45,46,50,55,],[7,7,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'CICLO_FOR':([0,2,18,19,20,42,43,44,45,46,50,55,],[8,8,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'PRINT':([0,2,18,19,20,40,42,43,44,45,46,50,55,],[9,9,-3,-4,-5,47,-6,-7,-8,-9,-10,-12,-11,]),'$end':([1,2,10,18,19,20,42,43,44,45,46,50,55,],[0,-2,-1,-3,-4,-5,-6,-7,-8,-9,-10,-12,-11,]),'VARIABLE':([3,4,5,6,7,8,26,27,51,],[11,12,13,14,15,16,33,34,52,]),'PARENTESIS_INICIAL':([9,15,47,],[17,25,49,]),'PUNTO_Y_COMA':([11,12,13,48,54,],[18,19,20,50,55,]),'MAYOR_QUE':([14,],[21,]),'MENOR_QUE':([14,],[22,]),'MENOR_IGUAL':([14,],[23,]),'MAYOR_IGUAL':([14,],[24,]),'IN':([16,],[26,]),'COMILLA':([17,34,49,52,],[27,41,51,53,]),'DIGITO':([21,22,23,24,],[28,29,30,31,]),'PARENTESIS_FINAL':([25,41,53,],[32,48,54,]),'DOS_PUNTOS':([28,29,30,31,32,33,],[35,36,37,38,39,40,]),'CONTENIDO':([35,36,37,38,39,],[42,43,44,45,46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaraciones':([0,2,],[1,10,]),'declaracion':([0,2,],[2,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaraciones","S'",1,None,None,None),
  ('declaraciones -> declaracion declaraciones','declaraciones',2,'p_declaraciones','analizador_sintactico.py',7),
  ('declaraciones -> declaracion','declaraciones',1,'p_declaraciones','analizador_sintactico.py',8),
  ('declaracion -> DECLARATIVO_INT VARIABLE PUNTO_Y_COMA','declaracion',3,'p_declaracion','analizador_sintactico.py',17),
  ('declaracion -> DECLARATIVO_STRING VARIABLE PUNTO_Y_COMA','declaracion',3,'p_declaracion','analizador_sintactico.py',18),
  ('declaracion -> DECLARATIVO_FLOAT VARIABLE PUNTO_Y_COMA','declaracion',3,'p_declaracion','analizador_sintactico.py',19),
  ('declaracion -> CONDICIONAL_IF VARIABLE MAYOR_QUE DIGITO DOS_PUNTOS CONTENIDO','declaracion',6,'p_expresion_condicional','analizador_sintactico.py',25),
  ('declaracion -> CONDICIONAL_IF VARIABLE MENOR_QUE DIGITO DOS_PUNTOS CONTENIDO','declaracion',6,'p_expresion_condicional','analizador_sintactico.py',26),
  ('declaracion -> CONDICIONAL_IF VARIABLE MENOR_IGUAL DIGITO DOS_PUNTOS CONTENIDO','declaracion',6,'p_expresion_condicional','analizador_sintactico.py',27),
  ('declaracion -> CONDICIONAL_IF VARIABLE MAYOR_IGUAL DIGITO DOS_PUNTOS CONTENIDO','declaracion',6,'p_expresion_condicional','analizador_sintactico.py',28),
  ('declaracion -> FUNCION_DEF VARIABLE PARENTESIS_INICIAL PARENTESIS_FINAL DOS_PUNTOS CONTENIDO','declaracion',6,'p_definicion_funcion','analizador_sintactico.py',34),
  ('declaracion -> CICLO_FOR VARIABLE IN VARIABLE DOS_PUNTOS PRINT PARENTESIS_INICIAL COMILLA VARIABLE COMILLA PARENTESIS_FINAL PUNTO_Y_COMA','declaracion',12,'p_bucle','analizador_sintactico.py',40),
  ('declaracion -> PRINT PARENTESIS_INICIAL COMILLA VARIABLE COMILLA PARENTESIS_FINAL PUNTO_Y_COMA','declaracion',7,'p_print','analizador_sintactico.py',46),
]
